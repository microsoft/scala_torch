// THIS FILE IS AUTO-GENERATED, DO NOT EDIT. Changes should be made to package.scala.in

package com.microsoft.scalatorch.torch

import com.microsoft.scalatorch.torch
import com.microsoft.scalatorch.torch._
import com.microsoft.scalatorch.torch.util.Implicits._
import com.microsoft.scalatorch.torch.internal.{ TensorIndex, TensorVector, TorchTensor, LongVector, torch_swig => swig }
import com.microsoft.scalatorch.torch.util.NoGrad

package object special {
// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT
// See swig/src/main/swig/build.sbt for details
  def entr(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_entr(self.underlying))
  def ndtri(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_ndtri(self.underlying))
  def expm1(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_expm1(self.underlying))
  def exp2(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_exp2(self.underlying))
  def psi(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_psi(self.underlying))
  def digamma(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_digamma(self.underlying))
  def gammaln(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_gammaln(self.underlying))
  def erf(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_erf(self.underlying))
  def erfc(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_erfc(self.underlying))
  def erfcx(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_erfcx(self.underlying))
  def erfinv(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_erfinv(self.underlying))
  def ndtr(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_ndtr(self.underlying))
  def xlog1py(self: Tensor, other: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_xlog1py(self.underlying, other.underlying))
  def xlog1py(self: Scalar, other: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_xlog1py(self.underlying, other.underlying))
  def xlog1py(self: Tensor, other: Scalar)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_xlog1py(self.underlying, other.underlying))
  def xlogy(self: Tensor, other: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_xlogy(self.underlying, other.underlying))
  def xlogy(self: Scalar, other: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_xlogy(self.underlying, other.underlying))
  def xlogy(self: Tensor, other: Scalar)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_xlogy(self.underlying, other.underlying))
  def zeta(self: Tensor, other: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_zeta(self.underlying, other.underlying))
  def zeta(self: Scalar, other: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_zeta(self.underlying, other.underlying))
  def zeta(self: Tensor, other: Scalar)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_zeta(self.underlying, other.underlying))
  def i0(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_i0(self.underlying))
  def i0e(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_i0e(self.underlying))
  def i1(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_i1(self.underlying))
  def i1e(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_i1e(self.underlying))
  def logit(self: Tensor, eps: Option[Double] = None)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_logit(self.underlying, eps.asJavaDouble))
  def polygamma(n: Long, self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_polygamma(n, self.underlying))
  def logsumexp(self: Tensor, dim: Array[Long], keepdim: Boolean = false)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_logsumexp(self.underlying, dim, keepdim))
  def expit(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_expit(self.underlying))
  def sinc(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_sinc(self.underlying))
  def round(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_round(self.underlying))
  def log1p(self: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_log1p(self.underlying))
  def log_softmax(self: Tensor, dim: Long, dtype: Option[dtype] = None)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_log_softmax(self.underlying, dim, dtype.map(_.toScalarType)))
  def gammainc(self: Tensor, other: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_gammainc(self.underlying, other.underlying))
  def gammaincc(self: Tensor, other: Tensor)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_gammaincc(self.underlying, other.underlying))
  def multigammaln(self: Tensor, p: Long)(implicit cg: ReferenceManager): Tensor = Tensor(swig.special_multigammaln(self.underlying, p))}
