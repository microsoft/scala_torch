// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT
// See build.sbt for details
Tensor _cast_Byte(const Tensor & self, bool non_blocking);
Tensor _cast_Char(const Tensor & self, bool non_blocking);
Tensor _cast_Double(const Tensor & self, bool non_blocking);
Tensor _cast_Float(const Tensor & self, bool non_blocking);
Tensor _cast_Int(const Tensor & self, bool non_blocking);
Tensor _cast_Long(const Tensor & self, bool non_blocking);
Tensor _cast_Short(const Tensor & self, bool non_blocking);
Tensor _cast_Half(const Tensor & self, bool non_blocking);
Tensor _make_dual(const Tensor & primal, const Tensor & tangent, int64_t level);
tuple2<Tensor, Tensor> _unpack_dual(const Tensor & dual, int64_t level);
std::vector<Tensor> align_tensors(TensorList tensors);
void _assert_async(const Tensor & self);
bool _use_cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank);
tuple2<Tensor, Tensor> _cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity);
bool _use_cudnn_rnn_flatten_weight();
Tensor _cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, bool bidirectional);
tuple5<Tensor, Tensor, Tensor, Tensor, Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const c10::optional<Tensor> & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state);
Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, TensorOptions options);
int64_t _debug_has_internal_overlap(const Tensor & self);
tuple2<Tensor, Tensor> _fused_dropout(const Tensor & self, double p, c10::optional<Generator> generator);
Tensor _masked_scale(const Tensor & self, const Tensor & mask, double scale);
tuple2<Tensor, Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype);
void _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated);
void _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension);
void _sobol_engine_initialize_state_(Tensor & self, int64_t dimension);
Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape);
Tensor _shape_as_tensor(const Tensor & self);
Tensor dropout(const Tensor & input, double p, bool train);
void dropout_(Tensor & self, double p, bool train);
Tensor feature_dropout(const Tensor & input, double p, bool train);
void feature_dropout_(Tensor & self, double p, bool train);
Tensor alpha_dropout(const Tensor & input, double p, bool train);
void alpha_dropout_(Tensor & self, double p, bool train);
Tensor feature_alpha_dropout(const Tensor & input, double p, bool train);
void feature_alpha_dropout_(Tensor & self, double p, bool train);
Tensor abs(const Tensor & self);
void abs_(Tensor & self);
Tensor absolute(const Tensor & self);
Tensor angle(const Tensor & self);
Tensor view_as_real(const Tensor & self);
Tensor view_as_complex(const Tensor & self);
Tensor sgn(const Tensor & self);
Tensor real(const Tensor & self);
Tensor imag(const Tensor & self);
Tensor _conj(const Tensor & self);
Tensor conj(const Tensor & self);
Tensor _conj_physical(const Tensor & self);
Tensor conj_physical(const Tensor & self);
void conj_physical_(Tensor & self);
Tensor resolve_conj(const Tensor & self);
Tensor resolve_neg(const Tensor & self);
Tensor _neg_view(const Tensor & self);
Tensor acos(const Tensor & self);
void acos_(Tensor & self);
Tensor arccos(const Tensor & self);
void arccos_(Tensor & self);
Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad);
Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size);
tuple2<Tensor, Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size);
Tensor add(const Tensor & self, const Tensor & other, const Scalar & alpha);
Tensor _add_relu(const Tensor & self, const Tensor & other, const Scalar & alpha);
void _add_relu_(Tensor & self, const Tensor & other, const Scalar & alpha);
Tensor _add_relu(const Tensor & self, const Scalar & other, const Scalar & alpha);
void _add_relu_(Tensor & self, const Scalar & other, const Scalar & alpha);
Tensor add(const Tensor & self, const Scalar & other, const Scalar & alpha);
Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, const Scalar & beta, const Scalar & alpha);
void addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, const Scalar & beta, const Scalar & alpha);
Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, const Scalar & beta, const Scalar & alpha);
Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners);
Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners);
Tensor all(const Tensor & self, int64_t dim, bool keepdim);
bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan);
Tensor any(const Tensor & self, int64_t dim, bool keepdim);
Tensor arange(const Scalar & end, TensorOptions options);
Tensor arange(const Scalar & start, const Scalar & end, TensorOptions options);
Tensor arange(const Scalar & start, const Scalar & end, const Scalar & step, TensorOptions options);
Tensor _dim_arange(const Tensor & like, int64_t dim);
Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim);
Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim);
Tensor acosh(const Tensor & self);
void acosh_(Tensor & self);
Tensor arccosh(const Tensor & self);
void arccosh_(Tensor & self);
Tensor asinh(const Tensor & self);
void asinh_(Tensor & self);
Tensor arcsinh(const Tensor & self);
void arcsinh_(Tensor & self);
Tensor atanh(const Tensor & self);
void atanh_(Tensor & self);
Tensor arctanh(const Tensor & self);
void arctanh_(Tensor & self);
Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset);
void as_strided_(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset);
Tensor asin(const Tensor & self);
void asin_(Tensor & self);
Tensor arcsin(const Tensor & self);
void arcsin_(Tensor & self);
Tensor atan(const Tensor & self);
void atan_(Tensor & self);
Tensor arctan(const Tensor & self);
void arctan_(Tensor & self);
Tensor atleast_1d(const Tensor & self);
std::vector<Tensor> atleast_1d(TensorList tensors);
Tensor atleast_2d(const Tensor & self);
std::vector<Tensor> atleast_2d(TensorList tensors);
Tensor atleast_3d(const Tensor & self);
std::vector<Tensor> atleast_3d(TensorList tensors);
Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha);
void _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha);
Tensor bartlett_window(int64_t window_length, TensorOptions options);
Tensor bartlett_window(int64_t window_length, bool periodic, TensorOptions options);
Tensor batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled);
Tensor quantized_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & var, double eps, double output_scale, int64_t output_zero_point);
tuple5<Tensor, Tensor, Tensor, Tensor, int64_t> _batch_norm_impl_index(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled);
tuple3<Tensor, Tensor, Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var_transform, bool train, double eps, std::array<bool,3> output_mask, const Tensor & reservedSpace);
Tensor bernoulli(const Tensor & self, c10::optional<Generator> generator);
Tensor bernoulli(const Tensor & self, double p, c10::optional<Generator> generator);
Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const c10::optional<Tensor> & bias);
Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction);
Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction);
Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & pos_weight, int64_t reduction);
Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & pos_weight, int64_t reduction);
Tensor bincount(const Tensor & self, const c10::optional<Tensor> & weights, int64_t minlength);
Tensor bitwise_not(const Tensor & self);
Tensor copysign(const Tensor & self, const Tensor & other);
Tensor copysign(const Tensor & self, const Scalar & other);
Tensor logical_not(const Tensor & self);
Tensor logical_xor(const Tensor & self, const Tensor & other);
Tensor logical_and(const Tensor & self, const Tensor & other);
Tensor logical_or(const Tensor & self, const Tensor & other);
Tensor blackman_window(int64_t window_length, TensorOptions options);
Tensor blackman_window(int64_t window_length, bool periodic, TensorOptions options);
Tensor bmm(const Tensor & self, const Tensor & mat2);
std::vector<Tensor> broadcast_tensors(TensorList tensors);
Tensor broadcast_to(const Tensor & self, IntArrayRef size);
Tensor cat(TensorList tensors, int64_t dim);
Tensor concat(TensorList tensors, int64_t dim);
Tensor block_diag(TensorList tensors);
Tensor ceil(const Tensor & self);
void ceil_(Tensor & self);
Tensor chain_matmul(TensorList matrices);
std::vector<Tensor> unsafe_chunk(const Tensor & self, int64_t chunks, int64_t dim);
std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim);
std::vector<Tensor> tensor_split(const Tensor & self, int64_t sections, int64_t dim);
std::vector<Tensor> tensor_split(const Tensor & self, IntArrayRef indices, int64_t dim);
std::vector<Tensor> tensor_split(const Tensor & self, const Tensor & tensor_indices_or_sections, int64_t dim);
Tensor clamp(const Tensor & self, const c10::optional<Scalar> & min, const c10::optional<Scalar> & max);
void clamp_(Tensor & self, const c10::optional<Scalar> & min, const c10::optional<Scalar> & max);
Tensor clamp_max(const Tensor & self, const Scalar & max);
Tensor clamp_max(const Tensor & self, const Tensor & max);
void clamp_max_(Tensor & self, const Scalar & max);
void clamp_max_(Tensor & self, const Tensor & max);
Tensor clamp_min(const Tensor & self, const Scalar & min);
Tensor clamp_min(const Tensor & self, const Tensor & min);
void clamp_min_(Tensor & self, const Scalar & min);
void clamp_min_(Tensor & self, const Tensor & min);
Tensor clip(const Tensor & self, const c10::optional<Scalar> & min, const c10::optional<Scalar> & max);
void clip_(Tensor & self, const c10::optional<Scalar> & min, const c10::optional<Scalar> & max);
bool cudnn_is_acceptable(const Tensor & self);
Tensor complex(const Tensor & real, const Tensor & imag);
Tensor polar(const Tensor & abs, const Tensor & angle);
Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, const Scalar & value);
Tensor convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups);
Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups);
tuple3<Tensor, Tensor, Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask);
Tensor _convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32);
Tensor _convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled);
Tensor _convolution_mode(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, c10::string_view padding, IntArrayRef dilation, int64_t groups);
Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding);
tuple3<Tensor, Tensor, Tensor> _convolution_double_backward(const c10::optional<Tensor> & ggI, const c10::optional<Tensor> & ggW, const c10::optional<Tensor> & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32, std::array<bool,3> output_mask);
Tensor conv1d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups);
Tensor conv2d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups);
Tensor conv3d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups);
Tensor conv1d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, c10::string_view padding, IntArrayRef dilation, int64_t groups);
Tensor conv2d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, c10::string_view padding, IntArrayRef dilation, int64_t groups);
Tensor conv3d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, c10::string_view padding, IntArrayRef dilation, int64_t groups);
Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad);
tuple3<Tensor, Tensor, Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad);
Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation);
Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation);
Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation);
Tensor _copy_from(const Tensor & self, const Tensor & dst, bool non_blocking);
Tensor _copy_from_and_resize(const Tensor & self, const Tensor & dst);
Tensor cos(const Tensor & self);
void cos_(Tensor & self);
Tensor cosh(const Tensor & self);
void cosh_(Tensor & self);
Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction);
Tensor count_nonzero(const Tensor & self, IntArrayRef dim);
Tensor count_nonzero(const Tensor & self, c10::optional<int64_t> dim);
Tensor cov(const Tensor & self, int64_t correction, const c10::optional<Tensor> & fweights, const c10::optional<Tensor> & aweights);
Tensor corrcoef(const Tensor & self);
Tensor cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W);
Tensor cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W);
tuple4<Tensor, Tensor, Tensor, Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon);
tuple3<Tensor, Tensor, Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon, const Tensor & reserveSpace);
Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
Tensor cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
tuple2<Tensor, Tensor> cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32, std::array<bool,2> output_mask);
Tensor cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
tuple2<Tensor, Tensor> cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32, std::array<bool,2> output_mask);
Tensor cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
Tensor cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
Tensor cudnn_convolution_relu(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups);
Tensor cudnn_convolution_add_relu(const Tensor & self, const Tensor & weight, const Tensor & z, const c10::optional<Scalar> & alpha, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups);
Tensor cudnn_grid_sampler(const Tensor & self, const Tensor & grid);
tuple2<Tensor, Tensor> cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output);
tuple2<Tensor, Tensor> cummax(const Tensor & self, int64_t dim);
void _cummax_helper(const Tensor & self, Tensor & values, Tensor & indices, int64_t dim);
tuple2<Tensor, Tensor> cummin(const Tensor & self, int64_t dim);
void _cummin_helper(const Tensor & self, Tensor & values, Tensor & indices, int64_t dim);
Tensor cummaxmin_backward(const Tensor & grad, const Tensor & input, const Tensor & indices, int64_t dim);
Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);
Tensor cumprod_backward(const Tensor & grad, const Tensor & input, int64_t dim, const Tensor & output);
Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);
Tensor cumulative_trapezoid(const Tensor & y, const Tensor & x, int64_t dim);
Tensor cumulative_trapezoid(const Tensor & y, const Scalar & dx, int64_t dim);
Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity);
Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity);
tuple2<Tensor, Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity);
Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity);
Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2);
Tensor diagflat(const Tensor & self, int64_t offset);
Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2);
Tensor diagonal_backward(const Tensor & grad_output, IntArrayRef input_sizes, int64_t offset, int64_t dim1, int64_t dim2);
Tensor diff(const Tensor & self, int64_t n, int64_t dim, const c10::optional<Tensor> & prepend, const c10::optional<Tensor> & append);
std::vector<Tensor> gradient(const Tensor & self, const c10::optional<Scalar> & spacing, c10::optional<int64_t> dim, int64_t edge_order);
std::vector<Tensor> gradient(const Tensor & self, const Scalar & spacing, IntArrayRef dim, int64_t edge_order);
std::vector<Tensor> gradient(const Tensor & self, IntArrayRef dim, int64_t edge_order);
std::vector<Tensor> gradient(const Tensor & self, ArrayRef<Scalar> spacing, c10::optional<int64_t> dim, int64_t edge_order);
std::vector<Tensor> gradient(const Tensor & self, ArrayRef<Scalar> spacing, IntArrayRef dim, int64_t edge_order);
std::vector<Tensor> gradient(const Tensor & self, TensorList spacing, c10::optional<int64_t> dim, int64_t edge_order);
std::vector<Tensor> gradient(const Tensor & self, TensorList spacing, IntArrayRef dim, int64_t edge_order);
Tensor div(const Tensor & self, const Tensor & other);
Tensor div(const Tensor & self, const Tensor & other, c10::optional<c10::string_view> rounding_mode);
Tensor div(const Tensor & self, const Scalar & other);
Tensor div(const Tensor & self, const Scalar & other, c10::optional<c10::string_view> rounding_mode);
Tensor divide(const Tensor & self, const Tensor & other);
Tensor divide(const Tensor & self, const Scalar & other);
Tensor divide(const Tensor & self, const Tensor & other, c10::optional<c10::string_view> rounding_mode);
Tensor divide(const Tensor & self, const Scalar & other, c10::optional<c10::string_view> rounding_mode);
Tensor true_divide(const Tensor & self, const Tensor & other);
Tensor true_divide(const Tensor & self, const Scalar & other);
Tensor dot(const Tensor & self, const Tensor & tensor);
Tensor vdot(const Tensor & self, const Tensor & other);
Tensor einsum(c10::string_view equation, TensorList tensors);
Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse);
Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse);
Tensor embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);
void embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type);
Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);
tuple4<Tensor, Tensor, Tensor, Tensor> _embedding_bag_forward_only(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset, int64_t padding_idx);
tuple2<Tensor, Tensor> _rowwise_prune(const Tensor & weight, const Tensor & mask, ScalarType compressed_indices_dtype);
Tensor row_stack(TensorList tensors);
tuple4<Tensor, Tensor, Tensor, Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset);
tuple4<Tensor, Tensor, Tensor, Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset, c10::optional<int64_t> padding_idx);
tuple4<Tensor, Tensor, Tensor, Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset, int64_t padding_idx);
Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, int64_t padding_idx);
Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights, int64_t padding_idx);
Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights, int64_t padding_idx);
Tensor _embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode, int64_t padding_idx);
Tensor empty(IntArrayRef size, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor _empty_affine_quantized(IntArrayRef size, TensorOptions options, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format);
Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor empty_quantized(IntArrayRef size, const Tensor & qtensor, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor empty_like(const Tensor & self, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor empty_strided(IntArrayRef size, IntArrayRef stride, TensorOptions options);
Tensor erf(const Tensor & self);
void erf_(Tensor & self);
Tensor erfc(const Tensor & self);
void erfc_(Tensor & self);
Tensor exp(const Tensor & self);
void exp_(Tensor & self);
Tensor exp2(const Tensor & self);
void exp2_(Tensor & self);
Tensor expm1(const Tensor & self);
void expm1_(Tensor & self);
Tensor eye(int64_t n, TensorOptions options);
Tensor eye(int64_t n, int64_t m, TensorOptions options);
Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim);
void fill_(Tensor & self, const Scalar & value);
void fill_(Tensor & self, const Tensor & value);
Tensor floor(const Tensor & self);
void floor_(Tensor & self);
Tensor floor_divide(const Tensor & self, const Tensor & other);
Tensor floor_divide(const Tensor & self, const Scalar & other);
Tensor frac(const Tensor & self);
void frac_(Tensor & self);
Tensor full(IntArrayRef size, const Scalar & fill_value, TensorOptions options);
Tensor full_like(const Tensor & self, const Scalar & fill_value, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor from_file(c10::string_view filename, c10::optional<bool> shared, c10::optional<int64_t> size, TensorOptions options);
Tensor gcd(const Tensor & self, const Tensor & other);
void gcd_(Tensor & self, const Tensor & other);
Tensor lcm(const Tensor & self, const Tensor & other);
void lcm_(Tensor & self, const Tensor & other);
Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
tuple2<Tensor, Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
Tensor _grid_sampler_2d_cpu_fallback(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
tuple2<Tensor, Tensor> _grid_sampler_2d_cpu_fallback_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
tuple2<Tensor, Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
Tensor hann_window(int64_t window_length, TensorOptions options);
Tensor hann_window(int64_t window_length, bool periodic, TensorOptions options);
Tensor hamming_window(int64_t window_length, TensorOptions options);
Tensor hamming_window(int64_t window_length, bool periodic, TensorOptions options);
Tensor hamming_window(int64_t window_length, bool periodic, double alpha, TensorOptions options);
Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, TensorOptions options);
Tensor kaiser_window(int64_t window_length, TensorOptions options);
Tensor kaiser_window(int64_t window_length, bool periodic, TensorOptions options);
Tensor kaiser_window(int64_t window_length, bool periodic, double beta, TensorOptions options);
Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction);
Tensor group_norm(const Tensor & input, int64_t num_groups, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps, bool cudnn_enabled);
tuple3<Tensor, Tensor, Tensor> native_group_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps);
tuple3<Tensor, Tensor, Tensor> native_group_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, std::array<bool,3> output_mask);
Tensor _fft_r2c(const Tensor & self, IntArrayRef dim, int64_t normalization, bool onesided);
Tensor _fft_c2r(const Tensor & self, IntArrayRef dim, int64_t normalization, int64_t last_dim_size);
Tensor _fft_c2c(const Tensor & self, IntArrayRef dim, int64_t normalization, bool forward);
int64_t _cufft_get_plan_cache_size(int64_t device_index);
int64_t _cufft_get_plan_cache_max_size(int64_t device_index);
void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size);
void _cufft_clear_plan_cache(int64_t device_index);
Tensor index(const Tensor & self, const c10::List<c10::optional<Tensor>> & indices);
Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);
void index_put_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate);
Tensor index_put(const Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate);
void _index_put_impl_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate, bool unsafe);
Tensor instance_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled);
Tensor inverse(const Tensor & self);
Tensor _inverse_helper(const Tensor & self);
Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan);
Tensor isin(const Tensor & elements, const Tensor & test_elements, bool assume_unique, bool invert);
Tensor isin(const Tensor & elements, const Scalar & test_element, bool assume_unique, bool invert);
Tensor isin(const Scalar & element, const Tensor & test_elements, bool assume_unique, bool invert);
Tensor isnan(const Tensor & self);
bool is_distributed(const Tensor & self);
bool is_floating_point(const Tensor & self);
bool is_complex(const Tensor & self);
bool is_conj(const Tensor & self);
bool is_neg(const Tensor & self);
Tensor isreal(const Tensor & self);
bool is_nonzero(const Tensor & self);
bool is_same_size(const Tensor & self, const Tensor & other);
bool is_signed(const Tensor & self);
bool is_inference(const Tensor & self);
Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction, bool log_target);
Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, bool log_target);
Tensor kron(const Tensor & self, const Tensor & other);
tuple2<Tensor, Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim);
Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps, bool cudnn_enable);
tuple3<Tensor, Tensor, Tensor> native_layer_norm(const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps);
tuple3<Tensor, Tensor, Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, IntArrayRef normalized_shape, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, std::array<bool,3> output_mask);
Tensor nan_to_num(const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf);
void nan_to_num_(Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf);
Tensor linear(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias);
Tensor mkldnn_linear(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias);
Tensor mkldnn_linear_backward_input(IntArrayRef input_size, const Tensor & grad_output, const Tensor & weight);
tuple2<Tensor, Tensor> mkldnn_linear_backward_weights(const Tensor & grad_output, const Tensor & input, const Tensor & weight, bool bias_defined);
tuple3<Tensor, Tensor, Tensor> mkldnn_linear_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, std::array<bool,3> output_mask);
Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, const Scalar & weight_scale, const Scalar & weight_zero_point, const Tensor & bias);
Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, const Scalar & weight_scale, const Scalar & weight_zero_point, const Tensor & bias);
tuple4<Tensor, Tensor, double, int64_t> fbgemm_linear_quantize_weight(const Tensor & input);
Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input);
Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias);
Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias);
Tensor fbgemm_pack_quantized_matrix(const Tensor & input);
Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N);
Tensor ldexp(const Tensor & self, const Tensor & other);
void ldexp_(Tensor & self, const Tensor & other);
Tensor linspace(const Scalar & start, const Scalar & end, c10::optional<int64_t> steps, TensorOptions options);
Tensor log(const Tensor & self);
void log_(Tensor & self);
Tensor log10(const Tensor & self);
void log10_(Tensor & self);
Tensor log1p(const Tensor & self);
void log1p_(Tensor & self);
Tensor log2(const Tensor & self);
void log2_(Tensor & self);
Tensor logaddexp(const Tensor & self, const Tensor & other);
Tensor logaddexp2(const Tensor & self, const Tensor & other);
Tensor xlogy(const Tensor & self, const Tensor & other);
Tensor xlogy(const Scalar & self, const Tensor & other);
Tensor xlogy(const Tensor & self, const Scalar & other);
void xlogy_(Tensor & self, const Tensor & other);
void xlogy_(Tensor & self, const Scalar & other);
Tensor logdet(const Tensor & self);
Tensor logspace(const Scalar & start, const Scalar & end, c10::optional<int64_t> steps, double base, TensorOptions options);
Tensor log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);
Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float);
Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);
Tensor _logcumsumexp(const Tensor & self, int64_t dim);
Tensor logcumsumexp(const Tensor & self, int64_t dim);
Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim);
Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction);
Tensor matmul(const Tensor & self, const Tensor & other);
Tensor matrix_rank(const Tensor & self, double tol, bool symmetric);
Tensor matrix_rank(const Tensor & self, bool symmetric);
Tensor matrix_power(const Tensor & self, int64_t n);
Tensor matrix_exp(const Tensor & self);
Tensor matrix_exp_backward(const Tensor & self, const Tensor & grad);
tuple2<Tensor, Tensor> _aminmax(const Tensor & self);
tuple2<Tensor, Tensor> _aminmax(const Tensor & self, int64_t dim, bool keepdim);
tuple2<Tensor, Tensor> aminmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim);
Tensor _compute_linear_combination(const Tensor & input, const Tensor & coefficients);
tuple2<Tensor, Tensor> max(const Tensor & self, int64_t dim, bool keepdim);
Tensor value_selecting_reduction_backward(const Tensor & grad, int64_t dim, const Tensor & indices, IntArrayRef sizes, bool keepdim);
Tensor amax(const Tensor & self, IntArrayRef dim, bool keepdim);
tuple2<Tensor, Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor mkldnn_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor mkldnn_max_pool2d_backward(const Tensor & grad_output, const Tensor & output, const Tensor & input, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor mkldnn_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor mkldnn_max_pool3d_backward(const Tensor & grad_output, const Tensor & output, const Tensor & input, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor quantized_max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor quantized_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype);
Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype);
Tensor nanmean(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype);
Tensor median(const Tensor & self);
tuple2<Tensor, Tensor> median(const Tensor & self, int64_t dim, bool keepdim);
Tensor nanmedian(const Tensor & self);
tuple2<Tensor, Tensor> nanmedian(const Tensor & self, int64_t dim, bool keepdim);
tuple2<Tensor, Tensor> min(const Tensor & self, int64_t dim, bool keepdim);
Tensor amin(const Tensor & self, IntArrayRef dim, bool keepdim);
Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups);
Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined);
tuple2<Tensor, Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined);
tuple3<Tensor, Tensor, Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask);
tuple3<Tensor, Tensor, Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon);
tuple3<Tensor, Tensor, Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon);
Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
Tensor miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
tuple3<Tensor, Tensor, Tensor> miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);
Tensor miopen_convolution_backward_bias(const Tensor & grad_output);
Tensor miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
tuple3<Tensor, Tensor, Tensor> miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);
Tensor miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
Tensor miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
Tensor miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
tuple3<Tensor, Tensor, Tensor> miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);
Tensor miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
tuple5<Tensor, Tensor, Tensor, Tensor, Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state);
Tensor mm(const Tensor & self, const Tensor & mat2);
Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense);
Tensor _sparse_sparse_matmul(const Tensor & self, const Tensor & other);
Tensor _sparse_mask_helper(const Tensor & t, const Tensor & mask_indices);
tuple2<Tensor, Tensor> mode(const Tensor & self, int64_t dim, bool keepdim);
Tensor mul(const Tensor & self, const Tensor & other);
Tensor mul(const Tensor & self, const Scalar & other);
Tensor multiply(const Tensor & self, const Tensor & other);
Tensor multiply(const Tensor & self, const Scalar & other);
Tensor mv(const Tensor & self, const Tensor & vec);
Tensor mvlgamma(const Tensor & self, int64_t p);
Tensor narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length);
Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length);
Tensor narrow(const Tensor & self, int64_t dim, const Tensor & start, int64_t length);
tuple3<Tensor, Tensor, Tensor> native_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps);
tuple2<Tensor, Tensor> batch_norm_stats(const Tensor & input, double eps);
Tensor batch_norm_elemt(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps);
tuple2<Tensor, Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, int64_t count);
tuple2<Tensor, Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, const Tensor & counts);
tuple3<Tensor, Tensor, Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_invstd, bool train, double eps, std::array<bool,3> output_mask);
tuple4<Tensor, Tensor, Tensor, Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, bool input_g, bool weight_g, bool bias_g);
Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu, const Tensor & count);
tuple2<Tensor, Tensor> batch_norm_update_stats(const Tensor & input, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum);
bool is_vulkan_available();
bool _nnpack_available();
Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride);
tuple3<Tensor, Tensor, Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask);
Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding);
Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding);
Tensor ones(IntArrayRef size, TensorOptions options);
Tensor ones_like(const Tensor & self, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim);
Tensor cdist(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode);
Tensor _euclidean_dist(const Tensor & x1, const Tensor & x2);
Tensor _cdist_forward(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode);
Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist);
Tensor pdist(const Tensor & self, double p);
Tensor _pdist_forward(const Tensor & self, double p);
Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist);
Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps);
Tensor permute(const Tensor & self, IntArrayRef dims);
Tensor movedim(const Tensor & self, IntArrayRef source, IntArrayRef destination);
Tensor movedim(const Tensor & self, int64_t source, int64_t destination);
Tensor moveaxis(const Tensor & self, IntArrayRef source, IntArrayRef destination);
Tensor moveaxis(const Tensor & self, int64_t source, int64_t destination);
Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor);
Tensor pixel_unshuffle(const Tensor & self, int64_t downscale_factor);
Tensor channel_shuffle(const Tensor & self, int64_t groups);
Tensor _pin_memory(const Tensor & self, c10::optional<Device> device);
Tensor pinverse(const Tensor & self, double rcond);
Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction);
Tensor rad2deg(const Tensor & self);
void rad2deg_(Tensor & self);
Tensor deg2rad(const Tensor & self);
void deg2rad_(Tensor & self);
Tensor scalar_tensor(const Scalar & s, TensorOptions options);
Tensor rand(IntArrayRef size, TensorOptions options);
Tensor rand(IntArrayRef size, c10::optional<Generator> generator, TensorOptions options);
Tensor rand_like(const Tensor & self, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor randint(int64_t high, IntArrayRef size, TensorOptions options);
Tensor randint(int64_t high, IntArrayRef size, c10::optional<Generator> generator, TensorOptions options);
Tensor randint(int64_t low, int64_t high, IntArrayRef size, TensorOptions options);
Tensor randint(int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, TensorOptions options);
Tensor randint_like(const Tensor & self, int64_t high, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor randint_like(const Tensor & self, int64_t low, int64_t high, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor randn(IntArrayRef size, TensorOptions options);
Tensor randn(IntArrayRef size, c10::optional<Generator> generator, TensorOptions options);
Tensor randn_like(const Tensor & self, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor randperm(int64_t n, TensorOptions options);
Tensor randperm(int64_t n, c10::optional<Generator> generator, TensorOptions options);
Tensor range(const Scalar & start, const Scalar & end, const Scalar & step, TensorOptions options);
Tensor ravel(const Tensor & self);
Tensor reciprocal(const Tensor & self);
void reciprocal_(Tensor & self);
Tensor neg(const Tensor & self);
void neg_(Tensor & self);
Tensor negative(const Tensor & self);
void negative_(Tensor & self);
Tensor repeat_interleave(const Tensor & repeats, c10::optional<int64_t> output_size);
Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim, c10::optional<int64_t> output_size);
Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim, c10::optional<int64_t> output_size);
Tensor reshape(const Tensor & self, IntArrayRef shape);
Tensor _reshape_alias(const Tensor & self, IntArrayRef size, IntArrayRef stride);
Tensor _mkldnn_reshape(const Tensor & self, IntArrayRef shape);
Tensor round(const Tensor & self);
void round_(Tensor & self);
Tensor rrelu(const Tensor & self, const Scalar & lower, const Scalar & upper, bool training, c10::optional<Generator> generator);
void rrelu_(Tensor & self, const Scalar & lower, const Scalar & upper, bool training, c10::optional<Generator> generator);
Tensor relu(const Tensor & self);
void relu_(Tensor & self);
Tensor relu6(const Tensor & self);
void relu6_(Tensor & self);
Tensor prelu(const Tensor & self, const Tensor & weight);
tuple2<Tensor, Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight);
Tensor gelu(const Tensor & self);
Tensor gelu_backward(const Tensor & grad, const Tensor & self);
Tensor infinitely_differentiable_gelu_backward(const Tensor & grad, const Tensor & self);
Tensor hardshrink(const Tensor & self, const Scalar & lambd);
Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, const Scalar & lambd);
Tensor rsqrt(const Tensor & self);
void rsqrt_(Tensor & self);
Tensor select(const Tensor & self, int64_t dim, int64_t index);
Tensor select_backward(const Tensor & grad_output, IntArrayRef input_sizes, int64_t dim, int64_t index);
Tensor selu(const Tensor & self);
void selu_(Tensor & self);
Tensor celu(const Tensor & self, const Scalar & alpha);
void celu_(Tensor & self, const Scalar & alpha);
Tensor silu(const Tensor & self);
void silu_(Tensor & self);
Tensor silu_backward(const Tensor & grad_output, const Tensor & self);
Tensor mish(const Tensor & self);
void mish_(Tensor & self);
Tensor mish_backward(const Tensor & grad_output, const Tensor & self);
Tensor sigmoid(const Tensor & self);
void sigmoid_(Tensor & self);
Tensor logit(const Tensor & self, c10::optional<double> eps);
void logit_(Tensor & self, c10::optional<double> eps);
Tensor sin(const Tensor & self);
void sin_(Tensor & self);
Tensor sinc(const Tensor & self);
void sinc_(Tensor & self);
Tensor sinh(const Tensor & self);
void sinh_(Tensor & self);
Tensor detach(const Tensor & self);
void detach_(Tensor & self);
int64_t size(const Tensor & self, int64_t dim);
Tensor slice(const Tensor & self, int64_t dim, c10::optional<int64_t> start, c10::optional<int64_t> end, int64_t step);
Tensor slice_backward(const Tensor & grad_output, IntArrayRef input_sizes, int64_t dim, int64_t start, int64_t end, int64_t step);
tuple2<Tensor, Tensor> slogdet(const Tensor & self);
Tensor smm(const Tensor & self, const Tensor & mat2);
Tensor softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);
Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float);
Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);
std::vector<Tensor> unsafe_split(const Tensor & self, int64_t split_size, int64_t dim);
std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim);
std::vector<Tensor> unsafe_split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim);
std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim);
std::vector<Tensor> hsplit(const Tensor & self, int64_t sections);
std::vector<Tensor> hsplit(const Tensor & self, IntArrayRef indices);
std::vector<Tensor> vsplit(const Tensor & self, int64_t sections);
std::vector<Tensor> vsplit(const Tensor & self, IntArrayRef indices);
std::vector<Tensor> dsplit(const Tensor & self, int64_t sections);
std::vector<Tensor> dsplit(const Tensor & self, IntArrayRef indices);
Tensor squeeze(const Tensor & self);
Tensor squeeze(const Tensor & self, int64_t dim);
Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta, const Scalar & alpha);
Tensor stack(TensorList tensors, int64_t dim);
Tensor _stack(TensorList tensors, int64_t dim);
Tensor hstack(TensorList tensors);
Tensor vstack(TensorList tensors);
Tensor dstack(TensorList tensors);
Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const c10::optional<Tensor> & window, bool normalized, c10::optional<bool> onesided, c10::optional<bool> return_complex);
Tensor istft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const c10::optional<Tensor> & window, bool center, bool normalized, c10::optional<bool> onesided, c10::optional<int64_t> length, bool return_complex);
int64_t stride(const Tensor & self, int64_t dim);
Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype);
Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype);
Tensor nansum(const Tensor & self, c10::optional<ScalarType> dtype);
Tensor nansum(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype);
Tensor sqrt(const Tensor & self);
void sqrt_(Tensor & self);
Tensor square(const Tensor & self);
void square_(Tensor & self);
Tensor std(const Tensor & self, bool unbiased);
Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim);
Tensor std(const Tensor & self, c10::optional<IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim);
tuple2<Tensor, Tensor> std_mean(const Tensor & self, bool unbiased);
tuple2<Tensor, Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim);
tuple2<Tensor, Tensor> std_mean(const Tensor & self, c10::optional<IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim);
Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype);
Tensor prod(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype);
Tensor t(const Tensor & self);
Tensor tan(const Tensor & self);
void tan_(Tensor & self);
Tensor tanh(const Tensor & self);
void tanh_(Tensor & self);
Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other);
Tensor threshold(const Tensor & self, const Scalar & threshold, const Scalar & value);
void threshold_(Tensor & self, const Scalar & threshold, const Scalar & value);
Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, const Scalar & threshold);
Tensor tile(const Tensor & self, IntArrayRef dims);
Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1);
Tensor _mkldnn_transpose(const Tensor & self, int64_t dim0, int64_t dim1);
void _mkldnn_transpose_(Tensor & self, int64_t dim0, int64_t dim1);
Tensor one_hot(const Tensor & self, int64_t num_classes);
Tensor flip(const Tensor & self, IntArrayRef dims);
Tensor fliplr(const Tensor & self);
Tensor flipud(const Tensor & self);
Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims);
Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims);
Tensor trapezoid(const Tensor & y, const Tensor & x, int64_t dim);
Tensor trapezoid(const Tensor & y, const Scalar & dx, int64_t dim);
Tensor trapz(const Tensor & y, const Tensor & x, int64_t dim);
Tensor trapz(const Tensor & y, double dx, int64_t dim);
Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim);
Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction);
Tensor trunc(const Tensor & self);
void trunc_(Tensor & self);
Tensor fix(const Tensor & self);
void fix_(Tensor & self);
bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from);
tuple2<Tensor, Tensor> _unique(const Tensor & self, bool sorted, bool return_inverse);
tuple3<Tensor, Tensor, Tensor> unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts);
tuple3<Tensor, Tensor, Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim);
tuple3<Tensor, Tensor, Tensor> unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts);
tuple3<Tensor, Tensor, Tensor> _unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts);
Tensor _unsafe_view(const Tensor & self, IntArrayRef size);
Tensor unsqueeze(const Tensor & self, int64_t dim);
Tensor vander(const Tensor & x, c10::optional<int64_t> N, bool increasing);
Tensor var(const Tensor & self, bool unbiased);
Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim);
Tensor var(const Tensor & self, c10::optional<IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim);
tuple2<Tensor, Tensor> var_mean(const Tensor & self, bool unbiased);
tuple2<Tensor, Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim);
tuple2<Tensor, Tensor> var_mean(const Tensor & self, c10::optional<IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim);
Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other);
Tensor where(const Tensor & condition, const Scalar & self, const Tensor & other);
Tensor where(const Tensor & condition, const Tensor & self, const Scalar & other);
Tensor where(const Tensor & condition, const Scalar & self, const Scalar & other);
std::vector<Tensor> where(const Tensor & condition);
Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other);
Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim);
Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim);
tuple2<Tensor, Tensor> _weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim);
tuple2<Tensor, Tensor> _weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim);
tuple2<Tensor, Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim);
Tensor zeros(IntArrayRef size, TensorOptions options);
Tensor zeros_like(const Tensor & self, TensorOptions options, c10::optional<MemoryFormat> memory_format);
Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output);
Tensor _standard_gamma(const Tensor & self, c10::optional<Generator> generator);
Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total);
Tensor _sample_dirichlet(const Tensor & self, c10::optional<Generator> generator);
Tensor poisson(const Tensor & self, c10::optional<Generator> generator);
Tensor binomial(const Tensor & count, const Tensor & prob, c10::optional<Generator> generator);
Tensor native_norm(const Tensor & self, const Scalar & p);
Tensor native_norm(const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype);
Tensor _sparse_sum(const Tensor & self);
Tensor _sparse_sum(const Tensor & self, ScalarType dtype);
Tensor _sparse_sum(const Tensor & self, IntArrayRef dim);
Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype);
Tensor _sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim);
Tensor _sparse_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);
Tensor _sparse_softmax(const Tensor & self, int64_t dim, bool half_to_float);
Tensor _sparse_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);
Tensor _sparse_log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);
Tensor _sparse_log_softmax(const Tensor & self, int64_t dim, bool half_to_float);
Tensor _sparse_log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);
Tensor norm(const Tensor & self, const c10::optional<Scalar> & p, ScalarType dtype);
Tensor norm(const Tensor & self, const Scalar & p);
Tensor norm(const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, ScalarType dtype);
Tensor norm(const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim);
tuple2<Tensor, Tensor> frexp(const Tensor & self);
Tensor frobenius_norm(const Tensor & self);
Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim);
Tensor nuclear_norm(const Tensor & self, bool keepdim);
Tensor nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim);
Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format);
Tensor positive(const Tensor & self);
void resize_as_(const Tensor & self, const Tensor & the_template, c10::optional<MemoryFormat> memory_format);
void resize_as_sparse_(const Tensor & self, const Tensor & the_template);
void zero_(Tensor & self);
Tensor sub(const Tensor & self, const Tensor & other, const Scalar & alpha);
Tensor sub(const Tensor & self, const Scalar & other, const Scalar & alpha);
Tensor subtract(const Tensor & self, const Tensor & other, const Scalar & alpha);
Tensor subtract(const Tensor & self, const Scalar & other, const Scalar & alpha);
Tensor rsub(const Tensor & self, const Tensor & other, const Scalar & alpha);
Tensor heaviside(const Tensor & self, const Tensor & values);
Tensor rsub(const Tensor & self, const Scalar & other, const Scalar & alpha);
Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, const Scalar & beta, const Scalar & alpha);
Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta, const Scalar & alpha);
Tensor sparse_csr_tensor(const Tensor & crow_indices, const Tensor & col_indices, const Tensor & values, IntArrayRef size, TensorOptions options);
Tensor sparse_csr_tensor(const Tensor & crow_indices, const Tensor & col_indices, const Tensor & values, TensorOptions options);
Tensor _sparse_csr_tensor_unsafe(const Tensor & crow_indices, const Tensor & col_indices, const Tensor & values, IntArrayRef size, TensorOptions options);
Tensor sparse_coo_tensor(IntArrayRef size, TensorOptions options);
Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, TensorOptions options);
Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, TensorOptions options);
Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, TensorOptions options);
void _validate_sparse_coo_tensor_args(const Tensor & indices, const Tensor & values, IntArrayRef size);
void _validate_sparse_csr_tensor_args(const Tensor & crow_indices, const Tensor & col_indices, const Tensor & values, IntArrayRef size);
Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, TensorOptions options);
Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, TensorOptions options);
std::vector<Tensor> _to_cpu(TensorList tensors);
Tensor to_dense_backward(const Tensor & grad, const Tensor & input);
Tensor _coalesce(const Tensor & self);
Tensor hspmm(const Tensor & mat1, const Tensor & mat2);
void copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking);
std::vector<Tensor> unbind(const Tensor & self, int64_t dim);
Tensor mkldnn_reorder_conv2d_weight(const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups);
Tensor mkldnn_reorder_conv3d_weight(const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups);
Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input);
Tensor quantize_per_tensor(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype);
Tensor quantize_per_tensor(const Tensor & self, const Tensor & scale, const Tensor & zero_point, ScalarType dtype);
std::vector<Tensor> quantize_per_tensor(TensorList tensors, const Tensor & scales, const Tensor & zero_points, ScalarType dtype);
Tensor quantize_per_channel(const Tensor & self, const Tensor & scales, const Tensor & zero_points, int64_t axis, ScalarType dtype);
Tensor dequantize(const Tensor & self);
std::vector<Tensor> dequantize(TensorList tensors);
double q_scale(const Tensor & self);
int64_t q_zero_point(const Tensor & self);
Tensor q_per_channel_scales(const Tensor & self);
Tensor q_per_channel_zero_points(const Tensor & self);
int64_t q_per_channel_axis(const Tensor & self);
Tensor int_repr(const Tensor & self);
Tensor _make_per_tensor_quantized_tensor(const Tensor & self, double scale, int64_t zero_point);
Tensor _make_per_channel_quantized_tensor(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis);
Tensor fake_quantize_per_tensor_affine(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
Tensor fake_quantize_per_tensor_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t quant_min, int64_t quant_max);
tuple2<Tensor, Tensor> fake_quantize_per_tensor_affine_cachemask(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
tuple2<Tensor, Tensor> _fake_quantize_per_tensor_affine_cachemask_tensor_qparams(const Tensor & self, const Tensor & scale, const Tensor & zero_point, const Tensor & fake_quant_enabled, int64_t quant_min, int64_t quant_max);
Tensor fake_quantize_per_tensor_affine_cachemask_backward(const Tensor & grad, const Tensor & mask);
Tensor _fake_quantize_learnable_per_tensor_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t quant_min, int64_t quant_max, double grad_factor);
tuple3<Tensor, Tensor, Tensor> _fake_quantize_learnable_per_tensor_affine_backward(const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t quant_min, int64_t quant_max, double grad_factor);
Tensor fake_quantize_per_channel_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
tuple2<Tensor, Tensor> fake_quantize_per_channel_affine_cachemask(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
Tensor fake_quantize_per_channel_affine_cachemask_backward(const Tensor & grad, const Tensor & mask);
Tensor _fake_quantize_learnable_per_channel_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max, double grad_factor);
tuple3<Tensor, Tensor, Tensor> _fake_quantize_learnable_per_channel_affine_backward(const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max, double grad_factor);
Tensor fused_moving_avg_obs_fake_quant(const Tensor & self, const Tensor & observer_on, const Tensor & fake_quant_on, Tensor & running_min, Tensor & running_max, Tensor & scale, Tensor & zero_point, double averaging_const, int64_t quant_min, int64_t quant_max, int64_t ch_axis, bool per_row_fake_quant, bool symmetric_quant);
tuple2<Tensor, Tensor> _fused_moving_avg_obs_fq_helper(const Tensor & self, const Tensor & observer_on, const Tensor & fake_quant_on, Tensor & running_min, Tensor & running_max, Tensor & scale, Tensor & zero_point, double averaging_const, int64_t quant_min, int64_t quant_max, int64_t ch_axis, bool per_row_fake_quant, bool symmetric_quant);
tuple2<double, int64_t> _choose_qparams_per_tensor(const Tensor & self, bool reduce_range);
Tensor _saturate_weight_to_fp16(const Tensor & weight);
tuple2<Tensor, Tensor> choose_qparams_optimized(const Tensor & input, int64_t numel, int64_t n_bins, double ratio, int64_t bit_width);
Tensor _to_copy(const Tensor & self, TensorOptions options, bool non_blocking, c10::optional<MemoryFormat> memory_format);
std::vector<Tensor> meshgrid(TensorList tensors);
std::vector<Tensor> meshgrid(TensorList tensors, c10::string_view indexing);
Tensor cartesian_prod(TensorList tensors);
Tensor combinations(const Tensor & self, int64_t r, bool with_replacement);
ScalarType result_type(const Tensor & tensor, const Tensor & other);
ScalarType result_type(const Tensor & tensor, const Scalar & other);
ScalarType result_type(const Scalar & scalar, const Tensor & tensor);
ScalarType result_type(const Scalar & scalar1, const Scalar & scalar2);
bool can_cast(ScalarType from, ScalarType to);
ScalarType promote_types(ScalarType type1, ScalarType type2);
Scalar _local_scalar_dense(const Tensor & self);
tuple3<Tensor, Tensor, Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias);
tuple5<Tensor, Tensor, Tensor, Tensor, Tensor> _thnn_fused_lstm_cell_backward(const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias);
tuple5<Tensor, Tensor, Tensor, Tensor, Tensor> _thnn_differentiable_lstm_cell_backward(const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias, const Tensor & cx, const Tensor & cy);
tuple2<Tensor, Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias);
tuple5<Tensor, Tensor, Tensor, Tensor, Tensor> _thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias);
tuple5<Tensor, Tensor, Tensor, Tensor, Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias);
tuple3<Tensor, Tensor, Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
tuple3<Tensor, Tensor, Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
tuple2<Tensor, Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
tuple2<Tensor, Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
tuple2<Tensor, Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
tuple2<Tensor, Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
tuple2<Tensor, Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
tuple2<Tensor, Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
tuple2<Tensor, Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh);
Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh);
Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh);
Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh);
tuple2<Tensor, Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, const Scalar & scale_ih, const Scalar & scale_hh, const Scalar & zero_point_ih, const Scalar & zero_point_hh);
Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, const Scalar & scale_ih, const Scalar & scale_hh, const Scalar & zero_point_ih, const Scalar & zero_point_hh);
Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, const Scalar & scale_ih, const Scalar & scale_hh, const Scalar & zero_point_ih, const Scalar & zero_point_hh);
Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, const Scalar & scale_ih, const Scalar & scale_hh, const Scalar & zero_point_ih, const Scalar & zero_point_hh);
tuple2<Tensor, Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first);
Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first);
tuple2<Tensor, Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, const Scalar & padding_value, int64_t total_length);
Tensor masked_fill(const Tensor & self, const Tensor & mask, const Scalar & value);
Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value);
Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source);
Tensor put(const Tensor & self, const Tensor & index, const Tensor & source, bool accumulate);
Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);
Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source, const Scalar & alpha);
Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Scalar & value);
Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value);
Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);
Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Scalar & value);
Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src, c10::string_view reduce);
Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Scalar & value, c10::string_view reduce);
Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);
Tensor bitwise_and(const Tensor & self, const Scalar & other);
Tensor bitwise_and(const Tensor & self, const Tensor & other);
Tensor __and__(const Tensor & self, const Scalar & other);
Tensor __and__(const Tensor & self, const Tensor & other);
Tensor bitwise_or(const Tensor & self, const Scalar & other);
Tensor bitwise_or(const Tensor & self, const Tensor & other);
Tensor __or__(const Tensor & self, const Scalar & other);
Tensor __or__(const Tensor & self, const Tensor & other);
Tensor bitwise_xor(const Tensor & self, const Scalar & other);
Tensor bitwise_xor(const Tensor & self, const Tensor & other);
Tensor __xor__(const Tensor & self, const Scalar & other);
Tensor __xor__(const Tensor & self, const Tensor & other);
Tensor __lshift__(const Tensor & self, const Scalar & other);
Tensor __lshift__(const Tensor & self, const Tensor & other);
Tensor bitwise_left_shift(const Tensor & self, const Tensor & other);
Tensor bitwise_left_shift(const Tensor & self, const Scalar & other);
Tensor bitwise_left_shift(const Scalar & self, const Tensor & other);
Tensor __rshift__(const Tensor & self, const Scalar & other);
Tensor __rshift__(const Tensor & self, const Tensor & other);
Tensor bitwise_right_shift(const Tensor & self, const Tensor & other);
Tensor bitwise_right_shift(const Tensor & self, const Scalar & other);
Tensor bitwise_right_shift(const Scalar & self, const Tensor & other);
Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha);
Tensor diag(const Tensor & self, int64_t diagonal);
Tensor diag_backward(const Tensor & grad, IntArrayRef input_sizes, int64_t diagonal);
Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim);
Tensor triu(const Tensor & self, int64_t diagonal);
Tensor tril(const Tensor & self, int64_t diagonal);
Tensor tril_indices(int64_t row, int64_t col, int64_t offset, TensorOptions options);
Tensor triu_indices(int64_t row, int64_t col, int64_t offset, TensorOptions options);
Tensor trace(const Tensor & self);
Tensor trace_backward(const Tensor & grad, IntArrayRef sizes);
Tensor ne(const Tensor & self, const Scalar & other);
Tensor ne(const Tensor & self, const Tensor & other);
Tensor not_equal(const Tensor & self, const Scalar & other);
Tensor not_equal(const Tensor & self, const Tensor & other);
Tensor eq(const Tensor & self, const Scalar & other);
Tensor eq(const Tensor & self, const Tensor & other);
Tensor ge(const Tensor & self, const Scalar & other);
Tensor ge(const Tensor & self, const Tensor & other);
Tensor greater_equal(const Tensor & self, const Scalar & other);
Tensor greater_equal(const Tensor & self, const Tensor & other);
Tensor le(const Tensor & self, const Scalar & other);
Tensor le(const Tensor & self, const Tensor & other);
Tensor less_equal(const Tensor & self, const Scalar & other);
Tensor less_equal(const Tensor & self, const Tensor & other);
Tensor gt(const Tensor & self, const Scalar & other);
Tensor gt(const Tensor & self, const Tensor & other);
Tensor greater(const Tensor & self, const Scalar & other);
Tensor greater(const Tensor & self, const Tensor & other);
Tensor lt(const Tensor & self, const Scalar & other);
Tensor lt(const Tensor & self, const Tensor & other);
Tensor less(const Tensor & self, const Scalar & other);
Tensor less(const Tensor & self, const Tensor & other);
Tensor take(const Tensor & self, const Tensor & index);
Tensor take_along_dim(const Tensor & self, const Tensor & indices, c10::optional<int64_t> dim);
Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index);
Tensor index_select_backward(const Tensor & grad, IntArrayRef self_sizes, int64_t dim, const Tensor & index);
Tensor masked_select(const Tensor & self, const Tensor & mask);
Tensor masked_select_backward(const Tensor & grad, const Tensor & input, const Tensor & mask);
Tensor nonzero(const Tensor & self);
std::vector<Tensor> nonzero_numpy(const Tensor & self);
Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad);
Tensor gather_backward(const Tensor & grad, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad);
Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad);
Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value);
Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value);
Tensor cross_entropy_loss(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, double label_smoothing);
tuple2<Tensor, Tensor> lstsq(const Tensor & self, const Tensor & A);
tuple2<Tensor, Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular);
tuple2<Tensor, Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper);
tuple2<Tensor, Tensor> _symeig_helper(const Tensor & self, bool eigenvectors, bool upper);
tuple2<Tensor, Tensor> eig(const Tensor & self, bool eigenvectors);
tuple3<Tensor, Tensor, Tensor> svd(const Tensor & self, bool some, bool compute_uv);
tuple3<Tensor, Tensor, Tensor> _svd_helper(const Tensor & self, bool some, bool compute_uv);
Tensor swapaxes(const Tensor & self, int64_t axis0, int64_t axis1);
Tensor swapdims(const Tensor & self, int64_t dim0, int64_t dim1);
Tensor cholesky(const Tensor & self, bool upper);
Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper);
Tensor _cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper);
tuple2<Tensor, Tensor> solve(const Tensor & self, const Tensor & A);
tuple2<Tensor, Tensor> _solve_helper(const Tensor & self, const Tensor & A);
Tensor cholesky_inverse(const Tensor & self, bool upper);
tuple2<Tensor, Tensor> qr(const Tensor & self, bool some);
tuple2<Tensor, Tensor> geqrf(const Tensor & self);
Tensor orgqr(const Tensor & self, const Tensor & input2);
Tensor ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose);
tuple3<Tensor, Tensor, Tensor> _lu_with_info(const Tensor & self, bool pivot, bool check_errors);
Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);
tuple3<Tensor, Tensor, Tensor> lu_unpack(const Tensor & LU_data, const Tensor & LU_pivots, bool unpack_data, bool unpack_pivots);
Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator);
Tensor lgamma(const Tensor & self);
Tensor digamma(const Tensor & self);
Tensor polygamma(int64_t n, const Tensor & self);
Tensor erfinv(const Tensor & self);
Tensor i0(const Tensor & self);
void i0_(Tensor & self);
Tensor sign(const Tensor & self);
Tensor signbit(const Tensor & self);
Tensor dist(const Tensor & self, const Tensor & other, const Scalar & p);
Tensor atan2(const Tensor & self, const Tensor & other);
Tensor lerp(const Tensor & self, const Tensor & end, const Scalar & weight);
Tensor lerp(const Tensor & self, const Tensor & end, const Tensor & weight);
Tensor histc(const Tensor & self, int64_t bins, const Scalar & min, const Scalar & max);
tuple2<Tensor, Tensor> histogram(const Tensor & self, const Tensor & bins, const c10::optional<Tensor> & weight, bool density);
tuple2<Tensor, Tensor> histogram(const Tensor & self, int64_t bins, c10::optional<ArrayRef<double>> range, const c10::optional<Tensor> & weight, bool density);
Tensor fmod(const Tensor & self, const Scalar & other);
Tensor fmod(const Tensor & self, const Tensor & other);
Tensor hypot(const Tensor & self, const Tensor & other);
Tensor igamma(const Tensor & self, const Tensor & other);
Tensor igammac(const Tensor & self, const Tensor & other);
Tensor nextafter(const Tensor & self, const Tensor & other);
Tensor remainder(const Tensor & self, const Scalar & other);
Tensor remainder(const Tensor & self, const Tensor & other);
Tensor remainder(const Scalar & self, const Tensor & other);
Tensor min(const Tensor & self);
Tensor fmin(const Tensor & self, const Tensor & other);
Tensor max(const Tensor & self);
Tensor fmax(const Tensor & self, const Tensor & other);
Tensor maximum(const Tensor & self, const Tensor & other);
Tensor max(const Tensor & self, const Tensor & other);
Tensor minimum(const Tensor & self, const Tensor & other);
Tensor min(const Tensor & self, const Tensor & other);
Tensor quantile(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim);
Tensor quantile(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim);
Tensor nanquantile(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim);
Tensor nanquantile(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim);
Tensor quantile(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim, c10::string_view interpolation);
Tensor quantile(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim, c10::string_view interpolation);
Tensor nanquantile(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim, c10::string_view interpolation);
Tensor nanquantile(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim, c10::string_view interpolation);
tuple2<Tensor, Tensor> sort(const Tensor & self, int64_t dim, bool descending);
tuple2<Tensor, Tensor> sort(const Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending);
Tensor msort(const Tensor & self);
Tensor argsort(const Tensor & self, int64_t dim, bool descending);
tuple2<Tensor, Tensor> topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted);
Tensor all(const Tensor & self);
Tensor any(const Tensor & self);
Tensor renorm(const Tensor & self, const Scalar & p, int64_t dim, const Scalar & maxnorm);
Tensor unfold_backward(const Tensor & grad_in, IntArrayRef input_sizes, int64_t dim, int64_t size, int64_t step);
bool equal(const Tensor & self, const Tensor & other);
Tensor pow(const Tensor & self, const Tensor & exponent);
Tensor pow(const Scalar & self, const Tensor & exponent);
Tensor pow(const Tensor & self, const Scalar & exponent);
Tensor float_power(const Tensor & self, const Tensor & exponent);
Tensor float_power(const Scalar & self, const Tensor & exponent);
Tensor float_power(const Tensor & self, const Scalar & exponent);
Tensor alias(const Tensor & self);
void _index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);
void _amp_foreach_non_finite_check_and_unscale_(TensorList self, Tensor & found_inf, const Tensor & inv_scale);
void _amp_update_scale_(Tensor & self, Tensor & growth_tracker, const Tensor & found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval);
Tensor _cat(TensorList tensors, int64_t dim);
std::vector<Tensor> _foreach_add(TensorList tensors, const Scalar & scalar);
void _foreach_add_(TensorList self, const Scalar & scalar);
std::vector<Tensor> _foreach_sub(TensorList tensors, const Scalar & scalar);
void _foreach_sub_(TensorList self, const Scalar & scalar);
std::vector<Tensor> _foreach_mul(TensorList tensors, const Scalar & scalar);
void _foreach_mul_(TensorList self, const Scalar & scalar);
std::vector<Tensor> _foreach_div(TensorList tensors, const Scalar & scalar);
void _foreach_div_(TensorList self, const Scalar & scalar);
std::vector<Tensor> _foreach_add(TensorList tensors1, TensorList tensors2, const Scalar & alpha);
void _foreach_add_(TensorList self, TensorList other, const Scalar & alpha);
std::vector<Tensor> _foreach_sub(TensorList tensors1, TensorList tensors2, const Scalar & alpha);
void _foreach_sub_(TensorList self, TensorList other, const Scalar & alpha);
std::vector<Tensor> _foreach_mul(TensorList tensors1, TensorList tensors2);
void _foreach_mul_(TensorList self, TensorList other);
std::vector<Tensor> _foreach_div(TensorList tensors1, TensorList tensors2);
void _foreach_div_(TensorList self, TensorList other);
std::vector<Tensor> _foreach_add(TensorList tensors, ArrayRef<Scalar> scalars);
void _foreach_add_(TensorList self, ArrayRef<Scalar> scalars);
std::vector<Tensor> _foreach_sub(TensorList tensors, ArrayRef<Scalar> scalars);
void _foreach_sub_(TensorList self, ArrayRef<Scalar> scalars);
std::vector<Tensor> _foreach_div(TensorList tensors, ArrayRef<Scalar> scalars);
void _foreach_div_(TensorList self, ArrayRef<Scalar> scalars);
std::vector<Tensor> _foreach_mul(TensorList tensors, ArrayRef<Scalar> scalars);
void _foreach_mul_(TensorList self, ArrayRef<Scalar> scalars);
std::vector<Tensor> _foreach_exp(TensorList tensors);
void _foreach_zero_(TensorList self);
void _foreach_exp_(TensorList self);
std::vector<Tensor> _foreach_sqrt(TensorList tensors);
void _foreach_sqrt_(TensorList self);
std::vector<Tensor> _foreach_abs(TensorList tensors);
void _foreach_abs_(TensorList self);
std::vector<Tensor> _foreach_acos(TensorList tensors);
void _foreach_acos_(TensorList self);
std::vector<Tensor> _foreach_asin(TensorList tensors);
void _foreach_asin_(TensorList self);
std::vector<Tensor> _foreach_atan(TensorList tensors);
void _foreach_atan_(TensorList self);
std::vector<Tensor> _foreach_ceil(TensorList tensors);
void _foreach_ceil_(TensorList self);
std::vector<Tensor> _foreach_cos(TensorList tensors);
void _foreach_cos_(TensorList self);
std::vector<Tensor> _foreach_cosh(TensorList tensors);
void _foreach_cosh_(TensorList self);
std::vector<Tensor> _foreach_erf(TensorList tensors);
void _foreach_erf_(TensorList self);
std::vector<Tensor> _foreach_erfc(TensorList tensors);
void _foreach_erfc_(TensorList self);
std::vector<Tensor> _foreach_expm1(TensorList tensors);
void _foreach_expm1_(TensorList self);
std::vector<Tensor> _foreach_floor(TensorList tensors);
void _foreach_floor_(TensorList self);
std::vector<Tensor> _foreach_log(TensorList tensors);
void _foreach_log_(TensorList self);
std::vector<Tensor> _foreach_log10(TensorList tensors);
void _foreach_log10_(TensorList self);
std::vector<Tensor> _foreach_log1p(TensorList tensors);
void _foreach_log1p_(TensorList self);
std::vector<Tensor> _foreach_log2(TensorList tensors);
void _foreach_log2_(TensorList self);
std::vector<Tensor> _foreach_neg(TensorList tensors);
void _foreach_neg_(TensorList self);
std::vector<Tensor> _foreach_tan(TensorList tensors);
void _foreach_tan_(TensorList self);
std::vector<Tensor> _foreach_tanh(TensorList tensors);
void _foreach_tanh_(TensorList self);
std::vector<Tensor> _foreach_sin(TensorList tensors);
void _foreach_sin_(TensorList self);
std::vector<Tensor> _foreach_sinh(TensorList tensors);
void _foreach_sinh_(TensorList self);
std::vector<Tensor> _foreach_round(TensorList tensors);
void _foreach_round_(TensorList self);
std::vector<Tensor> _foreach_lgamma(TensorList tensors);
void _foreach_lgamma_(TensorList self);
std::vector<Tensor> _foreach_frac(TensorList tensors);
void _foreach_frac_(TensorList self);
std::vector<Tensor> _foreach_reciprocal(TensorList tensors);
void _foreach_reciprocal_(TensorList self);
std::vector<Tensor> _foreach_sigmoid(TensorList tensors);
void _foreach_sigmoid_(TensorList self);
std::vector<Tensor> _foreach_trunc(TensorList tensors);
void _foreach_trunc_(TensorList self);
void _foreach_addcdiv_(TensorList self, TensorList tensor1, TensorList tensor2, const Scalar & value);
void _foreach_addcmul_(TensorList self, TensorList tensor1, TensorList tensor2, const Scalar & value);
void _foreach_addcdiv_(TensorList self, TensorList tensor1, TensorList tensor2, ArrayRef<Scalar> scalars);
void _foreach_addcmul_(TensorList self, TensorList tensor1, TensorList tensor2, ArrayRef<Scalar> scalars);
std::vector<Tensor> _foreach_addcdiv(TensorList input, TensorList tensor1, TensorList tensor2, const Scalar & value);
std::vector<Tensor> _foreach_addcmul(TensorList input, TensorList tensor1, TensorList tensor2, const Scalar & value);
std::vector<Tensor> _foreach_addcdiv(TensorList input, TensorList tensor1, TensorList tensor2, ArrayRef<Scalar> scalars);
std::vector<Tensor> _foreach_addcmul(TensorList input, TensorList tensor1, TensorList tensor2, ArrayRef<Scalar> scalars);
std::vector<Tensor> _foreach_maximum(TensorList tensors1, TensorList tensors2);
std::vector<Tensor> _foreach_minimum(TensorList tensors1, TensorList tensors2);
Tensor bucketize(const Tensor & self, const Tensor & boundaries, bool out_int32, bool right);
Tensor bucketize(const Scalar & self, const Tensor & boundaries, bool out_int32, bool right);
Tensor searchsorted(const Tensor & sorted_sequence, const Tensor & self, bool out_int32, bool right);
Tensor searchsorted(const Tensor & sorted_sequence, const Scalar & self, bool out_int32, bool right);
Tensor _convert_indices_from_coo_to_csr(const Tensor & self, int64_t size, bool out_int32);
Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction);
Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction);
Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
Tensor multi_margin_loss(const Tensor & self, const Tensor & target, const Scalar & p, const Scalar & margin, const c10::optional<Tensor> & weight, int64_t reduction);
Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Scalar & p, const Scalar & margin, const c10::optional<Tensor> & weight, int64_t reduction);
Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction);
tuple2<Tensor, Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction);
Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target);
Tensor nll_loss_nd(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
Tensor nll_loss(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
tuple2<Tensor, Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);
Tensor nll_loss2d(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
tuple2<Tensor, Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);
Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction, double beta);
Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double beta);
Tensor huber_loss(const Tensor & self, const Tensor & target, int64_t reduction, double delta);
Tensor huber_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double delta);
Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction);
Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
Tensor elu(const Tensor & self, const Scalar & alpha, const Scalar & scale, const Scalar & input_scale);
Tensor elu_backward(const Tensor & grad_output, const Scalar & alpha, const Scalar & scale, const Scalar & input_scale, bool is_result, const Tensor & self_or_result);
void elu_(Tensor & self, const Scalar & alpha, const Scalar & scale, const Scalar & input_scale);
Tensor glu(const Tensor & self, int64_t dim);
Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim);
Tensor hardsigmoid(const Tensor & self);
void hardsigmoid_(Tensor & self);
Tensor hardsigmoid_backward(const Tensor & grad_output, const Tensor & self);
Tensor hardtanh(const Tensor & self, const Scalar & min_val, const Scalar & max_val);
Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, const Scalar & min_val, const Scalar & max_val);
void hardtanh_(Tensor & self, const Scalar & min_val, const Scalar & max_val);
Tensor hardswish(const Tensor & self);
void hardswish_(Tensor & self);
Tensor hardswish_backward(const Tensor & grad_output, const Tensor & self);
Tensor leaky_relu(const Tensor & self, const Scalar & negative_slope);
Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, const Scalar & negative_slope, bool self_is_result);
void leaky_relu_(Tensor & self, const Scalar & negative_slope);
Tensor log_sigmoid(const Tensor & self);
tuple2<Tensor, Tensor> log_sigmoid_forward(const Tensor & self);
Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer);
Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, const Scalar & lower, const Scalar & upper, bool training, c10::optional<Generator> generator);
Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, const Scalar & lower, const Scalar & upper, bool training, bool self_is_result);
void rrelu_with_noise_(Tensor & self, const Tensor & noise, const Scalar & lower, const Scalar & upper, bool training, c10::optional<Generator> generator);
Tensor softplus(const Tensor & self, const Scalar & beta, const Scalar & threshold);
Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, const Scalar & beta, const Scalar & threshold, const Tensor & output);
Tensor softshrink(const Tensor & self, const Scalar & lambd);
Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, const Scalar & lambd);
Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);
Tensor mkldnn_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);
Tensor mkldnn_adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self);
Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);
Tensor _adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self);
Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size);
Tensor _adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size);
Tensor _adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self);
tuple2<Tensor, Tensor> adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size);
Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices);
tuple2<Tensor, Tensor> adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size);
Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices);
Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
tuple2<Tensor, Tensor> fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);
Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);
tuple2<Tensor, Tensor> fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);
Tensor fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);
tuple2<Tensor, Tensor> max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);
tuple2<Tensor, Tensor> max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);
Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);
Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size);
Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);
Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);
Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);
Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding);
Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
Tensor reflection_pad2d(const Tensor & self, IntArrayRef padding);
Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
Tensor reflection_pad3d(const Tensor & self, IntArrayRef padding);
Tensor reflection_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
Tensor replication_pad1d(const Tensor & self, IntArrayRef padding);
Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
Tensor replication_pad2d(const Tensor & self, IntArrayRef padding);
Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
Tensor replication_pad3d(const Tensor & self, IntArrayRef padding);
Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
Tensor upsample_linear1d(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_linear1d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_bilinear2d(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_bilinear2d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_trilinear3d(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_trilinear3d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_bicubic2d(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_bicubic2d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_nearest1d(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_nearest1d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_nearest2d(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_nearest2d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_nearest3d(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_nearest3d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors);
Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales);
Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales);
Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w);
Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w);
Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w);
Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w);
Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w);
Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w);
Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales);
Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales);
Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w);
Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w);
Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w);
Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w);
Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output);
Tensor logit_backward(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps);
Tensor tanh_backward(const Tensor & grad_output, const Tensor & output);
Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation);
tuple3<Tensor, Tensor, Tensor> slow_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask);
Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation);
tuple3<Tensor, Tensor, Tensor> slow_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);
Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding);
Tensor _conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
tuple2<Tensor, Tensor> _conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask);
Tensor conv_depthwise3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
tuple3<Tensor, Tensor, Tensor> conv_depthwise3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);
Tensor slow_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding);
tuple3<Tensor, Tensor, Tensor> slow_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding);
tuple3<Tensor, Tensor, Tensor> slow_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);
Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
tuple3<Tensor, Tensor, Tensor> slow_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);
Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
tuple3<Tensor, Tensor, Tensor> slow_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);
Tensor col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
Tensor col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
Tensor column_stack(TensorList tensors);
Tensor im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
Tensor im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
Tensor isfinite(const Tensor & self);
Tensor isinf(const Tensor & self);
Tensor isposinf(const Tensor & self);
Tensor isneginf(const Tensor & self);
Tensor _add_batch_dim(const Tensor & self, int64_t batch_dim, int64_t level);
Tensor _remove_batch_dim(const Tensor & self, int64_t level, int64_t batch_size, int64_t out_dim);
Tensor special_entr(const Tensor & self);
Tensor special_ndtri(const Tensor & self);
Tensor special_expm1(const Tensor & self);
Tensor special_exp2(const Tensor & self);
Tensor special_psi(const Tensor & self);
Tensor special_digamma(const Tensor & self);
Tensor special_gammaln(const Tensor & self);
Tensor special_erf(const Tensor & self);
Tensor special_erfc(const Tensor & self);
Tensor special_erfcx(const Tensor & self);
Tensor special_erfinv(const Tensor & self);
Tensor special_ndtr(const Tensor & self);
Tensor special_xlog1py(const Tensor & self, const Tensor & other);
Tensor special_xlog1py(const Scalar & self, const Tensor & other);
Tensor special_xlog1py(const Tensor & self, const Scalar & other);
Tensor special_xlogy(const Tensor & self, const Tensor & other);
Tensor special_xlogy(const Scalar & self, const Tensor & other);
Tensor special_xlogy(const Tensor & self, const Scalar & other);
Tensor special_zeta(const Tensor & self, const Tensor & other);
Tensor special_zeta(const Scalar & self, const Tensor & other);
Tensor special_zeta(const Tensor & self, const Scalar & other);
Tensor special_i0(const Tensor & self);
Tensor special_i0e(const Tensor & self);
Tensor special_i1(const Tensor & self);
Tensor special_i1e(const Tensor & self);
Tensor special_logit(const Tensor & self, c10::optional<double> eps);
Tensor special_polygamma(int64_t n, const Tensor & self);
Tensor special_logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim);
Tensor special_expit(const Tensor & self);
Tensor special_sinc(const Tensor & self);
Tensor special_round(const Tensor & self);
Tensor special_log1p(const Tensor & self);
Tensor special_log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);
Tensor special_gammainc(const Tensor & self, const Tensor & other);
Tensor special_gammaincc(const Tensor & self, const Tensor & other);
Tensor special_multigammaln(const Tensor & self, int64_t p);
Tensor fft_fft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<c10::string_view> norm);
Tensor fft_ifft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<c10::string_view> norm);
Tensor fft_rfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<c10::string_view> norm);
Tensor fft_irfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<c10::string_view> norm);
Tensor fft_hfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<c10::string_view> norm);
Tensor fft_ihfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<c10::string_view> norm);
Tensor fft_fft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<c10::string_view> norm);
Tensor fft_ifft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<c10::string_view> norm);
Tensor fft_rfft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<c10::string_view> norm);
Tensor fft_irfft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<c10::string_view> norm);
Tensor fft_fftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<c10::string_view> norm);
Tensor fft_ifftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<c10::string_view> norm);
Tensor fft_rfftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<c10::string_view> norm);
Tensor fft_irfftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<c10::string_view> norm);
Tensor fft_fftfreq(int64_t n, double d, TensorOptions options);
Tensor fft_rfftfreq(int64_t n, double d, TensorOptions options);
Tensor fft_fftshift(const Tensor & self, c10::optional<IntArrayRef> dim);
Tensor fft_ifftshift(const Tensor & self, c10::optional<IntArrayRef> dim);
tuple2<Tensor, Tensor> linalg_cholesky_ex(const Tensor & self, bool upper, bool check_errors);
Tensor linalg_cholesky(const Tensor & self, bool upper);
Tensor linalg_det(const Tensor & self);
Tensor det(const Tensor & self);
tuple3<Tensor, Tensor, Tensor> _det_lu_based_helper(const Tensor & self);
Tensor _det_lu_based_helper_backward_helper(const Tensor & det_grad, const Tensor & det, const Tensor & self, const Tensor & lu, const Tensor & pivs);
tuple4<Tensor, Tensor, Tensor, Tensor> linalg_lstsq(const Tensor & self, const Tensor & b, c10::optional<double> rcond, c10::optional<c10::string_view> driver);
Tensor linalg_matmul(const Tensor & self, const Tensor & other);
tuple2<Tensor, Tensor> linalg_slogdet(const Tensor & self);
tuple2<Tensor, Tensor> linalg_eig(const Tensor & self);
Tensor linalg_eigvals(const Tensor & self);
tuple2<Tensor, Tensor> linalg_eigh(const Tensor & self, c10::string_view UPLO);
Tensor linalg_eigvalsh(const Tensor & self, c10::string_view UPLO);
Tensor linalg_householder_product(const Tensor & input, const Tensor & tau);
void _linalg_inv_out_helper_(Tensor & self, Tensor & infos_lu, Tensor & infos_getri);
tuple2<Tensor, Tensor> linalg_inv_ex(const Tensor & self, bool check_errors);
Tensor linalg_inv(const Tensor & self);
Tensor inner(const Tensor & self, const Tensor & other);
Tensor outer(const Tensor & self, const Tensor & vec2);
Tensor ger(const Tensor & self, const Tensor & vec2);
Tensor linalg_norm(const Tensor & self, const c10::optional<Scalar> & ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype);
Tensor linalg_norm(const Tensor & self, c10::string_view ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype);
Tensor linalg_vector_norm(const Tensor & self, const Scalar & ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype);
Tensor linalg_matrix_norm(const Tensor & self, const Scalar & ord, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype);
Tensor linalg_matrix_norm(const Tensor & self, c10::string_view ord, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype);
tuple3<Tensor, Tensor, Tensor> linalg_svd(const Tensor & self, bool full_matrices);
Tensor linalg_svdvals(const Tensor & input);
Tensor linalg_cond(const Tensor & self, const c10::optional<Scalar> & p);
Tensor linalg_cond(const Tensor & self, c10::string_view p);
Tensor linalg_pinv(const Tensor & self, double rcond, bool hermitian);
Tensor linalg_pinv(const Tensor & self, const Tensor & rcond, bool hermitian);
Tensor linalg_solve(const Tensor & input, const Tensor & other);
Tensor linalg_tensorinv(const Tensor & self, int64_t ind);
Tensor linalg_tensorsolve(const Tensor & self, const Tensor & other, c10::optional<IntArrayRef> dims);
tuple2<Tensor, Tensor> linalg_qr(const Tensor & self, c10::string_view mode);
tuple2<Tensor, Tensor> _linalg_qr_helper(const Tensor & self, c10::string_view mode);
Tensor linalg_matrix_power(const Tensor & self, int64_t n);
Tensor linalg_matrix_rank(const Tensor & self, c10::optional<double> tol, bool hermitian);
Tensor linalg_matrix_rank(const Tensor & input, const Tensor & tol, bool hermitian);
Tensor linalg_multi_dot(TensorList tensors);
Tensor _test_serialization_subcmul(const Tensor & self, const Tensor & other, const Scalar & alpha);
Tensor _test_optional_intlist(const Tensor & values, c10::optional<IntArrayRef> addends);
Tensor _test_optional_filled_intlist(const Tensor & values, c10::optional<IntArrayRef> addends);
Tensor _test_optional_floatlist(const Tensor & values, c10::optional<ArrayRef<double>> addends);
Tensor _test_string_default(const Tensor & dummy, c10::string_view a, c10::string_view b);
Tensor _test_ambiguous_defaults(const Tensor & dummy, int64_t a, int64_t b);
Tensor _test_ambiguous_defaults(const Tensor & dummy, int64_t a, c10::string_view b);
Tensor segment_reduce(const Tensor & data, c10::string_view reduce, const c10::optional<Tensor> & lengths, const c10::optional<Tensor> & indices, int64_t axis, bool unsafe, const c10::optional<Scalar> & initial);
Tensor _segment_reduce_backward(const Tensor & grad, const Tensor & output, const Tensor & data, c10::string_view reduce, const c10::optional<Tensor> & lengths, int64_t axis);
Tensor pad_sequence(TensorList sequences, bool batch_first, double padding_value);
Tensor flatten_dense_tensors(TensorList tensors);
std::vector<Tensor> unflatten_dense_tensors(const Tensor & flat, TensorList tensors);